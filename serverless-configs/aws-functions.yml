edlAuthorizer:
    handler: serverless/src/edlAuthorizer/handler.default
    timeout: ${env:LAMBDA_TIMEOUT, '30'}

errorLogger:
  handler: serverless/src/errorLogger/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: error-logger

samlLogin:
  handler: serverless/src/samlLogin/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: saml-login

samlCallback:
  handler: serverless/src/samlCallback/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: saml-acs

samlRefreshToken:
  handler: serverless/src/samlRefreshToken/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: saml-refresh-token

edlProfile:
  handler: serverless/src/edlProfile/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: edl-profile

gkrKeywordRecommendations:
  handler: serverless/src/gkrKeywordRecommendations/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: gkr-keyword-recommendations

gkrSendFeedback:
  handler: serverless/src/gkrSendFeedback/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  events:
    - http:
        method: put
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: gkr-send-feedback

createTemplate:
  handler: serverless/src/createTemplate/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  role: IamRoleCustomResourcesLambdaExecution
  events:
    - http:
        method: post
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: providers/{providerId}/templates
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0

updateTemplate:
  handler: serverless/src/updateTemplate/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  role: IamRoleCustomResourcesLambdaExecution
  events:
    - http:
        method: put
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: providers/{providerId}/templates/{id}
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0

deleteTemplate:
  handler: serverless/src/deleteTemplate/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  role: IamRoleCustomResourcesLambdaExecution
  events:
    - http:
        method: delete
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: providers/{providerId}/templates/{id}
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0

getTemplates:
  handler: serverless/src/getTemplates/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  role: IamRoleCustomResourcesLambdaExecution
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: providers/{providerId}/templates
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0

getTemplate:
  handler: serverless/src/getTemplate/handler.default
  timeout: ${env:LAMBDA_TIMEOUT, '30'}
  role: IamRoleCustomResourcesLambdaExecution
  events:
    - http:
        method: get
        cors: ${file(./serverless-configs/${self:provider.name}-cors-configuration.yml)}
        path: providers/{providerId}/templates/{id}
        authorizer:
          name: edlAuthorizer
          type: request
          resultTtlInSeconds: 0
